<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kafkaÁöÑÁîü‰∫ß+Ê∂àË¥π]]></title>
    <url>%2F2019%2F04%2F23%2Fkafka%E7%9A%84%E7%94%9F%E4%BA%A7-%E6%B6%88%E8%B4%B9%2F</url>
    <content type="text"><![CDATA[Ê∂àÊÅØÈòüÂàóÁöÑÂÜÖÂÆπÂæà‰∏∞ÂØåÔºåÁõÆÂâçÊàëÂ∏∏Áî®ÁöÑÊòØkafkaÔºåÊâÄ‰ª•Á¨¨‰∏ÄÁØáÁåÆÁªôÊàëÁöÑkafkaÔºåÂêéÁª≠Êàë‰ª¨ÁªßÁª≠ÈíªÁ†î‰∏ãÔºåRocketMQ„ÄÅActiveMQ„ÄÇkafkaÁöÑÂéüÁîüÂÜôÊ≥ïÔºå‰∏çÁπÅÁêêÔºåÁõ¥Êé•ÁúãËßÅÈÖçÁΩÆÈ°πÂ∞±üëåÔºåÂ¶ÇÊûú‰Ω†ÊòØÂàöÂÖ•Èó®Â§ßÊï∞ÊçÆÊàñËÄÖÊòØÂàöÊé•ÊâãkafkaÁöÑËØùÈöæÂÖçÊúâËíôÂúàÁöÑÊÑüËßâÔºåButÔºÅÔºÅÔºÅËøô‰∏çË¶ÅÁ¥ßÔºåÂÖàËíôÂú®ÂÖ∂‰∏≠ÔºåÂêéÁª≠‰Ω†Êé•Ëß¶Â§ö‰∫ÜÂ§ßÊï∞ÊçÆÁöÑ‰∏úË•øÔºåÂ∞±‰ºöÂèëÁé∞ÔºåÂæàÂ§öÁªÑ‰ª∂Áî®‰∫ÜÂæàÂ§öÁöÑÈÖçÁΩÆÈ°πÔºåÂä†ËΩΩËøõÈÖçÁΩÆÈ°πÂ∞±ÂèØ‰ª•Áî®‰∫Ü„ÄÇÂΩìÁÑ∂ÊàëËØ¥ÁöÑËøòÊòØÊØîËæÉÂéüÁîüÁöÑÂÜôÊ≥ïÔºåÂàöÂàöÂÜôÂÆå‰∫Ü‰∏ÄÈÅçHBaseÁöÑÂéüÁîüÔºå‰∏ÄÊó∂ËÑ±Á¶ª‰∏çÂá∫Â∫ïÂ±ÇÁöÑËåÉÂõ¥ÂìàÂìàÂìà„ÄÇ ÂøÉÁÅµÈ∏°Ê±§‰∏Ä‰∏ãÔºöÂàöÂÖ•ËÅåÁöÑÂ∞èÁôΩÈÅáÂà∞‰∏ç‰ºöÁöÑÈóÆÈ¢òÔºåÁîöËÄÖË¢´ÊâπËØÑÔºåÂçÉ‰∏á‰∏çË¶ÅÊ∞îÈ¶ÅÔºåËßâÂæóËá™Â∑±‰∏çÈÄÇÂêàÂπ≤Ëøô‰∏™„ÄÇË°å‰∏öÊ≤°Êúâ‰∏çÈÄÇÂêàÁöÑÔºåÂè™ÊúâÂπ≤ÁöÑÂºÄ‰∏çÂºÄÂøÉ„ÄÇÂùöÊåÅ‰∏Ä‰∏ãÊ≤°ÂáÜ‰Ω†Â∞±ÊúâÂ∞èÈ™ÑÂÇ≤‰∫ÜÂë¢ÔºüÂ∫üËØùÂ∞ëËØ¥ÔºåÂºÄÂßãÊí∏Á†ÅÁîü‰∫ßËÄÖpublic class KafkaProvider{ private final Producer&lt;String, String&gt; producer; public final static String TOPIC = &quot;TEST-TOPIC&quot;; public KafkaProvider(){ Properties props = new Properties();//ÈÖçÁΩÆÈ°πÔºÅËøôË°å‰ª£Á†ÅÊòØkafkaÁöÑÊ∫êÂ§¥„ÄÇ props.put(&quot;bootstrap.servers&quot;, &quot;127.0.0.1:9092&quot;);//zookeeperÂú∞ÂùÄÔºåÈõÜÁæ§Áî®ÈÄóÂè∑ÂàÜÈöî //ËøôÈáåÂ¶ÇÊûú‰∏çÁÜüÊÇâÁöÑÂêåÂ≠¶ÔºåÂèØ‰ª•ÁúãÁúãkafaÁöÑÊû∂ÊûÑÂõæ„ÄÇÊØè‰∏Ä‰∏™ ![](kafkaÊû∂ÊûÑ.jpg) props.put(&quot;acks&quot;, &quot;all&quot;);//ËÆ∞ÂΩïÂÆåÊï¥Êèê‰∫§ÔºåÊúÄÊÖ¢‰ΩÜÊòØÊúÄÂ§ßÂèØËÉΩÁöÑÊåÅ‰πÖÂåñ props.put(&quot;retries&quot;, 3);//ËØ∑Ê±ÇÂ§±Ë¥•ÁöÑÈáçËØïÊ¨°Êï∞ props.put(&quot;batch.size&quot;, 16384);//batchÂ§ßÂ∞è props.put(&quot;linger.ms&quot;, 1);// ÈªòËÆ§ÊÉÖÂÜµÂç≥‰ΩøÁºìÂÜ≤Âå∫ÊúâÂâ©‰ΩôÁöÑÁ©∫Èó¥Ôºå‰πü‰ºöÁ´ãÂç≥ÂèëÈÄÅËØ∑Ê±ÇÔºåËÆæÁΩÆ‰∏ÄÊÆµÊó∂Èó¥Áî®Êù•Á≠âÂæÖ‰ªéËÄåÂ∞ÜÁºìÂÜ≤Âå∫Â°´ÁöÑÊõ¥Â§öÔºåÂçï‰Ωç‰∏∫ÊØ´ÁßíÔºåproducerÂèëÈÄÅÊï∞ÊçÆ‰ºöÂª∂Ëøü1msÔºåÂèØ‰ª•ÂáèÂ∞ëÂèëÈÄÅÂà∞kafkaÊúçÂä°Âô®ÁöÑËØ∑Ê±ÇÊï∞ÊçÆ props.put(&quot;buffer.memory&quot;, 33554432);// Êèê‰æõÁªôÁîü‰∫ßËÄÖÁºìÂÜ≤ÂÜÖÂ≠òÊÄªÈáè props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);//ÂÜôËØùÊñπÂºè props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;); //ÁîüÊàêÁîü‰∫ßËÄÖ producer = new KafkaProducer&lt;String, String&gt;(props); } //Âú®ÂÖ•Âè£ÂáΩÊï∞Ë∞ÉÁî®Âç≥ÂèØÔºåÂÖ∑‰ΩìÂ∫îÁî®ÊÉÖÂΩ¢Ê†πÊçÆÈ°πÁõÆÂÆûÈôÖÊù•Áúã public void producer(){ int messageNo = 1; final int COUNT =1000; while (1){ String num = String.valueOf(messageNo); String data = &quot;hello kafka message:&quot; + num; ProducerRecord record = new ProducerRecord(TOPIC,data); producer.send(record); messageNo ++ ; System.out.println(messageNo); try { sleep(1000); } catch ( InterruptedException e ) { e.printStackTrace(); } } } }Ê∂àË¥πËÄÖpublic class KafkaConsumer { private final Consumer consumer ; public final static String TOPIC = ‚ÄúTEST-TOPIC‚Äù; private ExecutorService executors; public KafkaCon(){ Properties props = new Properties(); props.put(&quot;bootstrap.servers&quot;, &quot;127.0.0.1:9092&quot;);//zkÂêåÁîü‰∫ßËÄÖ‰∏ÄËá¥ props.put(&quot;group.id&quot;, &quot;2&quot;);//ÂàÜÁªÑIdÔºÅÔºÅÔºÅÔºÅ props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);//Ëá™Âä®Êèê‰∫§ÔºåËøôÊòØÂØπoffsetÁöÑÊìç‰ΩúÔºåÊúâ‰∫õÈúÄË¶ÅÂØπoffsetÊõ¥Âä†Á≤æÂáÜÁöÑÂ§ÑÁêÜÔºåÈúÄË¶ÅËøõË°åÊâãÂä®Êèê‰∫§„ÄÇ props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;); props.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;); props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;); props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;); consumer = new KafkaConsumer&lt;String, String&gt;(props); consumer.subscribe(Arrays.asList(TOPIC)); execute(10); } public void execute(int workerNum) { executors = new ThreadPoolExecutor(workerNum, workerNum, 0L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue(1000), new ThreadPoolExecutor.CallerRunsPolicy()); Thread t = new Thread(new Runnable(){//ÂêØÂä®‰∏Ä‰∏™Â≠êÁ∫øÁ®ãÊù•ÁõëÂê¨kafkaÊ∂àÊÅØ @Override public void run(){ while (true) { ConsumerRecords&lt;String, String&gt; records = consumer.poll(200); for (final ConsumerRecord record : records) { System.out.println(&quot;„ÄêKafka„ÄëÁõëÂê¨Âà∞kafkaÁöÑTOPIC„Äê&quot; + record.topic() + &quot;„ÄëÁöÑÊ∂àÊÅØ&quot;); System.out.println(&quot;„ÄêKafka„ÄëÊ∂àÊÅØÂÜÖÂÆπÔºö&quot; + record.value()); executors.submit(new ConsumerWorker(record)); } } }}); t.start(); } } ËøôÊòØÊ†áÂáÜÁöÑ‰∏Ä‰∏™kafkaÈÖçÁΩÆ‰ø°ÊÅØÔºåÁîü‰∫ßÂÆûÊàò‰∏≠ÁöÑÂ∫îÁî®ÂæàÁÆÄÂçïÔºåÂçÉ‰∏áËÆ∞‰ΩèÂá†‰∏™ÂÖ≥ÈîÆËØçÔºöproduce„ÄÅconsumer„ÄÅtopic„ÄÅgroup.id„ÄÅpartition„ÄÅbrokerÔºåschemaÁöÑÂê´‰πâÔºå‰∏ªË¶ÅËøòÊòØÁêÜËß£Âêß„ÄÇÊèêÂá†‰∏™ÈóÆÈ¢òÂìàÔºüÂ¶ÇÊûú‰Ω†ÊÉ≥Â§ö‰∏™Ê∂àË¥πËÄÖÊ∂àË¥π‰∏Ä‰∏™topicÊÄé‰πàÂäûÔºüpartion‰∏≠ÁöÑÊ∂àÊÅØÊòØÈ°∫Â∫èÁöÑÔºåÂ§ö‰∏™partionÈó¥ÁöÑÊ∂àÊÅØÂë¢Ôºü]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>Ê∂àÊÅØÈòüÂàóÔºåkafka</tag>
        <tag>producer</tag>
        <tag>consumer</tag>
        <tag>topic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java ‰ª£Á†ÅËØ∑Ê±ÇURlÊ†∑‰æã]]></title>
    <url>%2F2019%2F04%2F23%2Fjava-%E4%BB%A3%E7%A0%81%E8%AF%B7%E6%B1%82URl%E6%A0%B7%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[‰π†ÊÉØ‰∫ÜÂú®ÂºÄÂèë‰∏≠ËøêÁî®Â∑•ÂÖ∑ÔºàpostmanÁ≠âÔºâË∞ÉËØïÊé•Âè£ÔºåÂá†‰πéÂøò‰∫ÜÁî®‰ª£Á†ÅÂèØ‰ª•Êõ¥Â•ΩÁöÑÂ§ÑÁêÜÂÆûÈôÖÊÉÖÂÜµ„ÄÇ DemoÊ†∑‰æã /** * ÂèëÈÄÅpostËØ∑Ê±Ç * @param url Ë∑ØÂæÑ * @param jsonObject ÂèÇÊï∞(jsonÁ±ªÂûã) * @param encoding ÁºñÁ†ÅÊ†ºÂºè * @return * @throws ParseException * @throws IOException */ public static String send(String url, JSONObject jsonObject,String encoding) throws ParseException, IOException{ String body = &quot;&quot;; //ÂàõÂª∫httpclientÂØπË±° CloseableHttpClient client = HttpClients.createDefault(); //ÂàõÂª∫postÊñπÂºèËØ∑Ê±ÇÂØπË±° HttpPost httpPost = new HttpPost(url); //Ë£ÖÂ°´ÂèÇÊï∞ StringEntity s = new StringEntity(jsonObject.toString(), &quot;utf-8&quot;); //ÂèÇÊï∞‰ΩìÊúâÊåâË¶ÅÊ±Ç‰πüË¶ÅËøõË°åContent-typeËµãÂÄº s.setContentType(&quot;application/json&quot;); s.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE, &quot;application/json&quot;)); //ËÆæÁΩÆÂèÇÊï∞Âà∞ËØ∑Ê±ÇÂØπË±°‰∏≠ httpPost.setEntity(s); System.out.println(&quot;ËØ∑Ê±ÇÂú∞ÂùÄÔºö&quot;+url); // System.out.println(‚ÄúËØ∑Ê±ÇÂèÇÊï∞Ôºö‚Äù+nvps.toString()); //ËÆæÁΩÆheader‰ø°ÊÅØ //ÊåáÂÆöÊä•ÊñáÂ§¥„ÄêContent-type„Äë„ÄÅ„ÄêUser-Agent„ÄëÈÄâÊã©ÂÖ∂‰∏ÄÂ∞±ok httpPost.setHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;); httpPost.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;); httpPost.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;); //ÊâßË°åËØ∑Ê±ÇÊìç‰ΩúÔºåÂπ∂ÊãøÂà∞ÁªìÊûúÔºàÂêåÊ≠•ÈòªÂ°ûÔºâ CloseableHttpResponse response = client.execute(httpPost); //Ëé∑ÂèñÁªìÊûúÂÆû‰Ωì HttpEntity entity = response.getEntity(); if (entity != null) { //ÊåâÊåáÂÆöÁºñÁ†ÅËΩ¨Êç¢ÁªìÊûúÂÆû‰Ωì‰∏∫StringÁ±ªÂûã body = EntityUtils.toString(entity, encoding); } EntityUtils.consume(entity); //ÈáäÊîæÈìæÊé• response.close(); return body; }]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Http</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBootÊîπÈÄ†]]></title>
    <url>%2F2019%2F04%2F21%2FSpringBoot%E6%94%B9%E9%80%A0%2F</url>
    <content type="text"><![CDATA[ÂàöÂÖ•ËÅåÁöÑÊó∂ÂÄôÔºåÂèëÁé∞Êàë‰ª¨Êé•ÊâãÈ°πÁõÆÊòØssmÂíåSpringBootÊ∑∑Áî®ÔºåËøô‰∏™‚ÄùÊ∑∑Áî®‚ÄùÂê¨Ëµ∑Êù•Â•áÊÄ™ÂìàÔºü‰∏ÄÂè•ËØùÂ∞±ÊòØÂæàÂ§ö‰æùËµñÈ°πÁî®‰∫ÜSpringBootÂèàÁî®‰∫ÜÂéüÁîüÔºåËøòÁî®‰∫Üssm‰∏≠ÁöÑ‰∏Ä‰∫õÂÜôÊ≥ï„ÄÇÁõ¥ËßÇÁúã‰∏äÂéª‰∏ÄÂè•my godÔΩûÔΩûÔΩûÂØπÊñ∞ÂÖ•ËÅåÁöÑÂ∫îÂ±äÁîüÊù•ËØ¥ÔºåÂ§öÂ∞ë‰ºöÊúâÊ∑∑Ê∑ÜÔºåÁî®Ëµ∑Êù•‰πü‰ºöÂæàÊíáËÑöÔºàÁ¢çÊâãÔºüÔºâ„ÄÇ‰ΩÜÊú¨ËèúÁãóËÆ§‰∏∫ËøôÁúüÊòØ‰∏Ä‰∏™Â≠¶‰π†ÁöÑÂ•ΩÊú∫‰ºöÔºå‰ªéÊúÄÂéüÁîüÁöÑÂÜô‰∏ÄÈÅçÔºåÂÜôÂà∞SpringBootÔºåÂÜôÂà∞Âú∞ËÄÅÂ§©Ëçí„ÄÇÂè¶Â§ñÊÇÑÊÇÑÂëäËØâ‰Ω†ÔºåÊàë‰ª¨ÁöÑ‰πãÂâçÁªÑ‰ª∂ÈÉΩÊòØÂéüÁîüÁöÑÂìàÂìàÂìàÂìàÔºåÊ†πÊú¨Ê≤°ÊúâCompentÔºå‰Ω†Áü•ÈÅìÊÄé‰πàÂÆûÁé∞ÁöÑÂêóÔºü ‰ª•‰∏äÈÉΩÊòØÂ∫üËØù Âπ≤Ë¥ß Êàë‰ªãÁªç‰∏ãSpringBootÁöÑÂéüÁêÜÔºå‰πüÂÅ∑ÂÅ∑ÊäìÁ¥ßÂ§ç‰π†‰∏ã„ÄÇ]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Dubbo</tag>
        <tag>cloud</tag>
        <tag>kafka</tag>
        <tag>ÂàÜÂ∏ÉÂºè</tag>
      </tags>
  </entry>
</search>
