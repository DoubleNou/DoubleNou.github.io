<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nou的技术逆袭</title>
  <icon>https://www.gravatar.com/avatar/437514e75b4c3fbc3705e56df986d682</icon>
  <subtitle>大大咧咧、情怀无限</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bulintt.com/"/>
  <updated>2019-04-23T04:45:44.373Z</updated>
  <id>https://bulintt.com/</id>
  
  <author>
    <name>Nou</name>
    <email>709824656@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 代码请求URl样例</title>
    <link href="https://bulintt.com/2019/04/23/java-%E4%BB%A3%E7%A0%81%E8%AF%B7%E6%B1%82URl%E6%A0%B7%E4%BE%8B/"/>
    <id>https://bulintt.com/2019/04/23/java-代码请求URl样例/</id>
    <published>2019-04-23T03:36:09.000Z</published>
    <updated>2019-04-23T04:45:44.373Z</updated>
    
    <content type="html"><![CDATA[<p>习惯了在开发中运用工具（postman等）调试接口，几乎忘了用代码可以更好的处理实际情况。</p><hr><p>Demo样例<br>    /**</p><pre><code> * 发送post请求 * @param url  路径 * @param jsonObject  参数(json类型) * @param encoding 编码格式 * @return * @throws ParseException * @throws IOException */public static String send(String url, JSONObject jsonObject,String encoding) throws ParseException, IOException{    String body = &quot;&quot;;    //创建httpclient对象    CloseableHttpClient client = HttpClients.createDefault();    //创建post方式请求对象    HttpPost httpPost = new HttpPost(url);    //装填参数    StringEntity s = new StringEntity(jsonObject.toString(), &quot;utf-8&quot;);    //参数体有按要求也要进行Content-type赋值    s.setContentType(&quot;application/json&quot;);    s.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,            &quot;application/json&quot;));    //设置参数到请求对象中    httpPost.setEntity(s);    System.out.println(&quot;请求地址：&quot;+url);</code></pre><p>//        System.out.println(“请求参数：”+nvps.toString());</p><pre><code>    //设置header信息    //指定报文头【Content-type】、【User-Agent】选择其一就ok    httpPost.setHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);    httpPost.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;);    httpPost.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;);    //执行请求操作，并拿到结果（同步阻塞）    CloseableHttpResponse response = client.execute(httpPost);    //获取结果实体    HttpEntity entity = response.getEntity();    if (entity != null) {        //按指定编码转换结果实体为String类型        body = EntityUtils.toString(entity, encoding);    }    EntityUtils.consume(entity);    //释放链接    response.close();    return body;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;习惯了在开发中运用工具（postman等）调试接口，几乎忘了用代码可以更好的处理实际情况。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Demo样例&lt;br&gt;    /**&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; * 发送post请求
 * @param url  路径
 * @param jsonOb
      
    
    </summary>
    
      <category term="HTTP" scheme="https://bulintt.com/categories/HTTP/"/>
    
    
      <category term="Http" scheme="https://bulintt.com/tags/Http/"/>
    
      <category term="SpringMVC" scheme="https://bulintt.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot改造</title>
    <link href="https://bulintt.com/2019/04/21/SpringBoot%E6%94%B9%E9%80%A0/"/>
    <id>https://bulintt.com/2019/04/21/SpringBoot改造/</id>
    <published>2019-04-21T08:52:10.000Z</published>
    <updated>2019-04-23T04:45:23.257Z</updated>
    
    <content type="html"><![CDATA[<p>刚入职的时候，发现我们接手项目是ssm和SpringBoot混用，这个”混用”听起来奇怪哈？一句话就是很多依赖项用了SpringBoot又用了原生，还用了ssm中的一些写法。直观看上去一句my god～～～<br>对新入职的应届生来说，多少会有混淆，用起来也会很撇脚（碍手？）。但本菜狗认为这真是一个学习的好机会，从最原生的写一遍，写到SpringBoot，写到地老天荒。另外悄悄告诉你，我们的之前组件都是原生的哈哈哈哈，根本没有Compent，你知道怎么实现的吗？</p><p>以上都是废话</p><hr><p>干货</p><p>我介绍下SpringBoot的原理，也偷偷抓紧复习下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚入职的时候，发现我们接手项目是ssm和SpringBoot混用，这个”混用”听起来奇怪哈？一句话就是很多依赖项用了SpringBoot又用了原生，还用了ssm中的一些写法。直观看上去一句my god～～～&lt;br&gt;对新入职的应届生来说，多少会有混淆，用起来也会很撇脚（碍手？
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://bulintt.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://bulintt.com/tags/SpringBoot/"/>
    
      <category term="Dubbo" scheme="https://bulintt.com/tags/Dubbo/"/>
    
      <category term="cloud" scheme="https://bulintt.com/tags/cloud/"/>
    
      <category term="kafka" scheme="https://bulintt.com/tags/kafka/"/>
    
      <category term="分布式" scheme="https://bulintt.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
